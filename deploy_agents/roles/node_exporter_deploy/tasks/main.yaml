---
- name: Check current node_exporter version
  command: "{{ node_exporter_bin_path }} --version"
  failed_when: false
  changed_when: false
  register: node_exporter_version_check

- name: Configure node_exporter version
  include_tasks: config-version.yml
  when: node_exporter_version == "latest" or node_exporter_version is undefined

- name: Download and extract node_exporter if necessary
  unarchive:
    src: "{{ node_exporter_download_url }}"
    dest: /tmp
    remote_src: true
    mode: 0755
  when: >
    node_exporter_version_check.stdout is not defined
    or node_exporter_version not in node_exporter_version_check.stdout
  register: node_exporter_download_check

- name: Move node_exporter binary into place
  copy:
    src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}/node_exporter"
    dest: "{{ node_exporter_bin_path }}"
    mode: 0755
    remote_src: true
  notify: restart node_exporter
  when: node_exporter_download_check is changed

- name: Clean up temporary files
  file:
    path: "/tmp/node_exporter-{{ node_exporter_version }}.linux-{{ node_exporter_arch }}"
    state: absent

- name: Create node_exporter user if not exists
  user:
    name: node_exporter
    shell: /sbin/nologin
    state: present

- name: Copy systemd unit file for node_exporter
  template:
    src: node_exporter.service.j2
    dest: /etc/systemd/system/node_exporter.service
    mode: 0644
  register: node_exporter_service

- name: Reload systemd daemon if service file changed
  systemd:
    daemon_reload: yes
  notify: restart node_exporter
  when: node_exporter_service.changed

- name: Ensure node_exporter is running and enabled
  systemd:
    name: node_exporter
    state: "{{ node_exporter_state }}"
    enabled: "{{ node_exporter_enabled }}"

- name: Verify node_exporter is responding to requests
  uri:
    url: "http://{{ node_exporter_host }}:{{ node_exporter_port }}/metrics"
    return_content: true
  register: metrics_output
  failed_when: "'Metrics' not in metrics_output.content"
